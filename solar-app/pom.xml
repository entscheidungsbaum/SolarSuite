<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.entscheidungsbaum</groupId>
		<artifactId>solarsuite</artifactId>
		<version>1.0.0-SNAPSHOT</version>
	</parent>

	<groupId>com.entscheidugnsbaum.scala.android.solarmonitor</groupId>
	<artifactId>solar-app</artifactId>
	<packaging>apk</packaging>
	<name>Solar - App</name>

	<properties>
		<environment>development</environment>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.android</groupId>
			<artifactId>android</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>com.google.android</groupId>
			<artifactId>android-test</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>net.droidsolutions.droidcharts</groupId>
			<artifactId>droidchart</artifactId>
			<version>1.0</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<sourceDirectory>src</sourceDirectory>
		<testSourceDirectory>test</testSourceDirectory>
		<resources>
			<!-- a pair definition for resource filtering of xml files only (not binary 
				files since they get mangled -->
			<resource>
				<directory>${project.basedir}/res</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/filtered-res</targetPath>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>${project.basedir}/res</directory>
				<filtering>false</filtering>
				<targetPath>${project.build.directory}/filtered-res</targetPath>
				<excludes>
					<exclude>**/*.xml</exclude>
				</excludes>
			</resource>

			<resource>
				<directory>${project.basedir}</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.directory}/filtered-manifest</targetPath>
				<includes>
					<include>AndroidManifest.xml</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>resources</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
				<artifactId>maven-android-plugin</artifactId>
				<extensions>true</extensions>
				<configuration>

					<sdk>
						<path>/opt/android-sdk-mac_x86</path>
							<platform>8</platform>
					</sdk>
					<androidManifestFile>${project.build.directory}/filtered-manifest/AndroidManifest.xml</androidManifestFile>
					<resourceDirectory>${project.build.directory}/filtered-res</resourceDirectory>
				</configuration>
				<executions>
					<!-- <execution> <id>startEmulator</id> <phase>initialize</phase> <goals> 
						<goal>emulator-start</goal> </goals> </execution> -->
					<execution>
						<id>alignApk</id>
						<phase>package</phase>
						<goals>
							<goal>zipalign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>development</id>
			<!-- using this since activeByDefault does not work well with multiple 
				profiles -->
			<activation>
				<property>
					<name>environment</name>
					<value>!production</value>
				</property>
			</activation>
			<properties>
				<deployment.stage>In Development</deployment.stage>
				<android.debuggable>true</android.debuggable>
			</properties>
		</profile>
		<profile>
			<id>production</id>
			<properties>
				<deployment.stage>In Production</deployment.stage>
				<android.debuggable>false</android.debuggable>
			</properties>
		</profile>
		<profile>
			<id>release</id>
			<!-- via this activation the profile is automatically used when the release 
				is done with the maven release plugin -->
			<activation>
				<property>
					<name>performRelease</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<plugins>
					<!-- proguard can shrink the source classes and remove unused classes 
						and more.. -->
					<plugin>
						<groupId>com.pyx4me</groupId>
						<artifactId>proguard-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>process-classes</phase>
								<goals>
									<goal>proguard</goal>
								</goals>
							</execution>
						</executions>
						<!-- we need to override the dependency of the plugin to get a newer 
							version of proguard -->
						<dependencies>
							<dependency>
								<groupId>net.sf.proguard</groupId>
								<artifactId>proguard</artifactId>
								<version>4.4</version>
								<scope>runtime</scope>
							</dependency>
						</dependencies>
						<configuration>
							<proguardVersion>4.4</proguardVersion>
							<maxMemory>256m</maxMemory>
							<injar>android-classes</injar>
							<libs>
								<lib>${rt.jar.path}</lib>
								<lib>${jsse.jar.path}</lib>
							</libs>
							<skip>false</skip>
							<obfuscate>true</obfuscate>
							<addMavenDescriptor>false</addMavenDescriptor>
							<options>
								<!-- which classes are we keeping around, android specific -->
								<option>-keep public class * extends android.app.Activity</option>
								<option>-keep public class * extends android.app.Application</option>
								<option>-keep public class * extends android.app.Service</option>
								<option>-keep public class * extends
									android.content.BroadcastReceiver</option>
								<option>-keep public class * extends
									android.content.ContentProvider</option>
								<option><![CDATA[-keep public class * extends android.view.View {
                                    public <init>(android.content.Context);
                                    public <init>(android.content.Context, android.util.AttributeSet);
                                    public <init>(android.content.Context, android.util.AttributeSet, int);
                                    public void set*(...);  }]]></option>
								<option><![CDATA[-keepclasseswithmembers class * {
                                    public <init> (android.content.Context, android.util.AttributeSet); } ]]></option>
								<option><![CDATA[-keepclasseswithmembers class * {
                                    public <init> (android.content.Context, android.util.AttributeSet, int); } ]]></option>
								<option><![CDATA[-keepclassmembers class * implements android.os.Parcelable {
                                    static android.os.Parcelable$Creator *; } ]]></option>
								<option><![CDATA[-keepclassmembers class **.R$* { public static <fields>; } ]]></option>
								<option><![CDATA[-keepclasseswithmembernames class * { native <methods>; } ]]></option>
								<option><![CDATA[-keepclassmembers class * extends java.lang.Enum {
                                    public static **[] values();
                                    public static ** valueOf(java.lang.String); } ]]></option>
								<option><![CDATA[-keepclassmembers class * extends android.app.Activity{
                                    public void *(android.view.View); } ]]></option>

								<!-- general proguard options -->
								<option>-dontskipnonpubliclibraryclasses</option>
								<!--<option>-dontusemixedcaseclassnames</option> -->
								<!--<option>-dontskipnonpubliclibraryclassmembers</option> -->
								<!--<option>-allowaccessmodification</option> -->

								<!-- you really should NOT avoid warning but it can be helpful when 
									testing options -->
								<option>-ignorewarnings</option>
								<option>-verbose</option>

								<!-- next options are necessary to decipher stack traces with retrace 
									later, relies on the map file created -->
								<option>-renamesourcefileattribute SourceFile</option>
								<option>-keepattributes SourceFile,LineNumberTable</option>

								<!---keepattributes -->
								<!--SourceFile,LineNumberTable,*Annotation* -->

								<!-- Optimization related settings -->
								<!--<option>-dontoptimize</option> -->
								<option>-optimizationpasses 3</option>
								<!-- The -optimizations option disables some arithmetic simplifications 
									that Dalvik 1.0 and 1.5 can't handle. -->
								<option>-optimizations !code/simplification/arithmetic</option>
							</options>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jarsigner-plugin</artifactId>
						<executions>
							<execution>
								<id>signing</id>
								<goals>
									<goal>sign</goal>
									<goal>verify</goal>
								</goals>
								<phase>package</phase>
								<inherited>true</inherited>
								<configuration>
									<removeExistingSignatures>true</removeExistingSignatures>
									<archiveDirectory />
									<includes>
										<include>${project.build.directory}/${project.artifactId}.apk</include>
									</includes>
									<keystore>${sign.keystore}</keystore>
									<alias>${sign.alias}</alias>
									<storepass>${sign.storepass}</storepass>
									<keypass>${sign.keypass}</keypass>
									<verbose>true</verbose>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- the signed apk then needs to be zipaligned -->
					<plugin>
						<groupId>com.jayway.maven.plugins.android.generation2</groupId>
						<artifactId>maven-android-plugin</artifactId>
						<inherited>true</inherited>
						<configuration>
							<sign>
								<debug>false</debug>
							</sign>
							<zipalign>
								<verbose>true</verbose>
								<inputApk>${project.build.directory}/${project.artifactId}.apk</inputApk>
								<outputApk>${project.build.directory}/${project.artifactId}-signed-aligned.apk
                                </outputApk>
							</zipalign>
						</configuration>
						<executions>
							<execution>
								<id>alignApk</id>
								<phase>package</phase>
								<goals>
									<goal>zipalign</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/${project.artifactId}-signed-aligned.apk</file>
									<type>apk</type>
									<classifier>signed-aligned</classifier>
								</artifact>
								<artifact>
									<file>${project.build.directory}/proguard_map.txt</file>
									<type>map</type>
									<classifier>release</classifier>
								</artifact>
							</artifacts>
						</configuration>
						<executions>
							<execution>
								<id>attach-signed-aligned</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- to avoid having to do symlinks to rt.jar like documented e.g. here 
			http://bruehlicke.blogspot.com/2009/11/missing-rtjar-mac-os-x-using-proguard.html 
			http://codebistro.com/2010/07/18/proguard-and-runtime-libraries-on-mac-os-x/ -->
		<profile>
			<id>linux</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<rt.jar.path>${env.JAVA_HOME}/jre/lib/rt.jar</rt.jar.path>
				<jsse.jar.path>${env.JAVA_HOME}/jre/lib/jsse.jar</jsse.jar.path>
			</properties>
		</profile>
		<!-- mac profile has to be after unix since running on mac will trigger 
			both -->
		<profile>
			<id>mac</id>
			<activation>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<properties>
				<!-- absolute path -->
				<!--<rt.jar.path>/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/classes.jar</rt.jar.path> -->
				<!-- or with JAVA_HOME /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/ -->
				<rt.jar.path>${env.JAVA_HOME}/../Classes/classes.jar</rt.jar.path>
				<jsse.jar.path>${env.JAVA_HOME}/../Classes/jsse.jar</jsse.jar.path>
			</properties>
		</profile>
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<rt.jar.path>${env.JAVA_HOME}/jre/lib/rt.jar</rt.jar.path>
				<jsse.jar.path>${env.JAVA_HOME}/jre/lib/jsse.jar</jsse.jar.path>
			</properties>
		</profile>

	</profiles>
</project>
